
###########
# Provision Ubuntu 21.04
###########


#!/bin/bash

###########
# Install software
###########

printf "\n\nInstalling Apt software...\n"
echo "________________"
sudo apt update
sudo apt upgrade -y

sudo apt-get install -y \
    vim-gtk3 \
    tmux \
    google-chrome-stable \
    gnome-tweaks \
    snapd \
    xclip \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release \
    pandoc \
    libglib2.0-dev-bin \
    gsettings-desktop-schemas \
    obs-studio \
    xdotool \
    cmake \
    build-essential \
    python3-dev \
    mono-complete \
    aptitude \
    toilet \
    grub-customizer \
    vim-addon-manager
sudo apt install -y virtualbox virtualbox-ext-pack



printf "\n\nCopying, sourcing .bash_aliases...\n"
echo "________________"
cp files/.bash_aliases /home/$USER/.bash_aliases
. /home/$USER/.bashrc



printf "\n\nInstalling Docker...\n"
echo "________________"
DOCK_KEY="/usr/share/keyrings/docker-archive-keyring.gpg"
if [ -e $DOCK_KEY ]; then
    printf "Already installed\n"
else
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg 
    echo \
    "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null 
    sudo apt-get update 
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io
    sudo usermod -aG docker ${USER}
    docker run hello-world
fi

#printf "\n\nInstalling docker-compose...\n"
#echo "________________"
#DC="/usr/local/bin/docker-compose"
#if [ -e $DC ]; then
#    printf "Already installed\n"
#else
#    sudo curl -L "https://github.com/docker/compose/releases/download/1.29.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
#    sudo chmod +x /usr/local/bin/docker-compose
#    docker-compose --version
#fi


printf "\n\nInstalling Ansible...\n"
echo "________________"
ANSIBLE_STATUS=$(dpkg -s ansible 2>/dev/null | echo $?)
if [ $ANSIBLE_STATUS -eq 0 ]; then
    printf "Already installed\n"
else
    sudo apt install software-properties-common -y
    sudo apt-add-repository -y --update ppa:ansible/ansible
    sudo apt install ansible -y
fi


printf "\n\nRemoving unnecessary Apt files...\n"
echo "________________"
sudo apt autoremove -y


printf "\n\nInstalling Snap software...\n"
echo "________________"
sudo snap install spotify
sudo snap install discord
sudo snap install gimp
sudo snap install postman
sudo snap install shotcut --classic
#sudo snap install --classic code
#sudo snap install --classic blender


#############
# Install easytether
#############

#printf "\n\n"
#printf "Installing EasyTether...\n" 
#echo "________________"
#ET="/usr/bin/easytether-usb"
#if [ -e $ET ]; then
#    printf "Already installed\n"
#else
#    sudo dpkg -i scripts/easytether_0.8.9_amd64_ubuntu_20-04.deb &&
#    sudo systemctl restart systemd-networkd
#    # .bash_aliases 
#    easy
#fi


#############
# Copy configuration files
#############

printf "\n\n"
printf "Copying configuration files and scripts...\n" 
echo "________________"

sudo cp files/jvalcher /etc/sudoers.d/jvalcher
printf "jvalcher \t\t(sudoers.d)\n"

sudo cp files/touchpad_toggle /usr/local/bin/
sudo chown $USER /usr/local/bin/touchpad_toggle
printf "touchpad_toggle\n"

#cp files/config /home/$USER/.config/terminator/config
#printf "config \t\t(terminator)\n"

cp files/.vimrc /home/$USER/.vimrc
echo ".vimrc"

cp -r files/Scripts /home/$USER/
printf "~/Scripts...\n"

#cp files/settings.json /home/$USER/.config/Code/User/settings.json
#printf "settings.json \t(VSCode)\n"
#
#cp files/config /home/$USER/.config/Code/User/config
#printf "config \t(VSCode)\n"
#
#cat files/extensions | xargs -L 1 code --install-extension 
#cp files/extensions /home/$USER/.config/Code/User/extensions 
#printf "\n\nInstalling VSCode extensions...\n"
#echo "________________"
#cat files/extensions | xargs -L 1 code --install-extension

cp files/gtk.css /home/$USER/.config/gtk-3.0/gtk.css
echo "gtk.css"

#dconf reset -f /org/gnome/terminal/
#dconf load /org/gnome/terminal/ < files/gnome_terminal_jvalcher
#echo "gnome-terminal"

cp files/.tmux.conf /home/$USER/
echo ".tmux.conf"
#cp -r files/.tmux /home/$USER/ 
#echo ".tmux/"

cp files/singing_bowl.wav /home/$USER/Music/
printf "singing_bowl.wav\n"

VIM_DIR="/home/$USER/.vim"
printf "\n\n"
printf "Installing Vim-Plug plugins...\n" 
echo "________________"
if [ -e $VIM_DIR/plugged ]; then
    vim +PlugClean +qall
    vim +PlugInstall +qall
    vim +PlugUpgrade +qall
else
    curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
    https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    vim +PlugInstall
fi

# install vim-markdown
MD_DIR="/home/$USER/Downloads/vim-markdown"
printf "\n\n"
printf "Installing vim-markdown...\n" 
echo "________________"
if [ ! -e $MD_DIR ]; then
    echo "Already installed"
else
    (cd ~/Downloads; \
    git clone https://github.com/plasticboy/vim-markdown.git \
    cd vim-markdown; \
    sudo make install; \
    vim-addon-manager install markdown)
fi 

# install vim-markdown
MD_DIR="/home/$USER/Downloads/vim-markdown"
printf "\n\n"
printf "Installing vim-markdown...\n" 
echo "________________"
if [ -e $MD_DIR ]; then
    echo "Already installed"
else
    (cd ~/Downloads; \
    git clone https://github.com/plasticboy/vim-markdown.git; \
    cd vim-markdown; \
    sudo make install; \
    vim-addon-manager install markdown)
fi 

printf "\n\n"
printf "Copying Vim skeletons...\n" 
echo "________________"
if [ -e $VIM_DIR/skeletons ]; then
    rsync -a --delete files/skeletons/ /home/$USER/.vim/skeletons/
else 
    cp -r files/skeletons $VIM_DIR/skeletons
fi

#printf "\n\n"
#printf "Copying Vim spelling additions...\n" 
#echo "________________"
#if [ -e $VIM_DIR/spell ]; then
#    rsync -a --delete files/spell/ /home/$USER/.vim/spell/
#else 
#    cp -r files/spell $VIM_DIR/spell
#fi
#
#sudo cp -r files/bin /home/$USER/


###########
# Set wallpaper
###########

#printf "\n\n"
#printf "Setting wallpaper...\n"
#echo "________________"
#
#WALLPAPER="forest1.jpg"
#LOGIN="forest.jpeg"
#PICTURES_DIR="/home/$USER/Pictures"
#
#cp wallpapers/* $PICTURES_DIR 
#source scripts/dbus.sh unity 
#sudo gsettings set org.gnome.desktop.background picture-uri file:///$PICTURES_DIR/$WALLPAPER
#echo "$PICTURES_DIR/$WALLPAPER"
## Change login screen
#sudo scripts/change-gdm-background $PICTURES_DIR/$LOGIN


###########
# Configure launcher
###########

printf "\n\n"
printf "Configuring launcher...\n"
echo "________________"
printf "Bottom position, centered, transparent, size=64, unity-backlit\n"
gsettings set org.gnome.shell.extensions.dash-to-dock extend-height false
gsettings set org.gnome.shell.extensions.dash-to-dock dock-position BOTTOM
gsettings set org.gnome.shell.extensions.dash-to-dock transparency-mode FIXED
gsettings set org.gnome.shell.extensions.dash-to-dock dash-max-icon-size 64


##########
# Exit message
##########

printf "\n\n\n"
echo "________________"
printf "Provisioning complete\n"
echo "________________"
printf "\n\n"


